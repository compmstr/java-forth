while
  run current instruction
    this may update where the current instruction points
  if curinstruction not modified... (if we jump, we don't want to skip anything)
    increment current instruction

TODO: fix interpret to work with curInstruction pointer
Need nextInstruction and curInstruction pointer
Main loop executes word at curInstruction pointer(jmp pointer)
	primitive words will increment it after,
	compound words will pop the return stack into it after
Start the system off by calling QUIT
	Simple, interpret, then branch back
Branch will set both nextInstruction and curInstruction back

Instruction pointer -> indexes in dictionary array
Dictionary array -> ints, indexes in Execution token array / literal values
Execution token array -> ForthExecutables

ForthExecutable
  //Storage for native functions
  Execute(ForthInterp)
ForthInterp - singleton
  Dictionary ByteBuffer
    Entries:
      Prev(int) -> index in dictionary of prev entry
      flags/len:
        3 bits:
          immed -- immediate word [& 0x80]
          hidden -- hidden (not-findable) word [& 0x40]
          primitive -- built-in word? [& 0x20]
        5 bits name length (up to 31 chars)
      name - stored as ascii
      definition:
        If primitive, pos in primitive XT array
        Else list of XTs in dictionary (usually starting with docol)
    Can use:
      get[|Short|Int](index)
      put[|Short|Int](index, val)
  Data Stack
  Return Stack
  nextInstruction
  curInstruction
  DOCOL() -> pushes nextInstruction onto return stack,
    sets nextInstruction to first word in it's list
  NEXT() -> increment nextInstruction,
    run next instruction
  EXIT() -> pop return stack into nextInstruction
  BRANCH(n) -> add n to nextInstruction, run next instruction
  0BRANCH(n) -> do same as BRANCH, but only if TOS == 0
  HERE() -> Pushes end of last dictionary entry to data stack

Constants
  DOCOL LIT <val> EXIT
Variables:
  <var> <header> DOCOL LIT <loc of <var>> EXIT
